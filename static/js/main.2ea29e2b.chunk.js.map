{"version":3,"sources":["images/Spinner.gif","components/Header.jsx","components/CountryInfo.jsx","components/Dashboard.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","appbar","background","color","formControl","minWidth","selectCountry","borderBottom","Header","props","handleCountry","data","useState","country","setCountry","classes","AppBar","className","position","Toolbar","IconButton","edge","aria-label","Typography","variant","FormControl","InputLabel","style","id","Select","labelId","value","onChange","event","target","Countries","map","MenuItem","key","Slug","Country","divider","margin","countryCard","grid","CountryInfo","charts","chart","loading","Grid","direction","item","sm","c","Card","CardContent","display","gutterBottom","TotalConfirmed","TotalRecovered","TotalDeaths","NewConfirmed","Divider","light","Date","md","splice","length","labels","date","getDate","getMonth","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","cases","Cases","width","height","container","justify","items","transform","transition","card","Dashboard","allstats","console","log","Container","xs","textAlign","Global","App","setChart","allCountries","setAllCountries","fetchAllCountries","a","axios","get","stats","isLoading","setIsLoading","fetchSelectedCountry","currentDate","getDay","getYear","getFullYear","useEffect","filterCountry","ct","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2ea29e2b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Spinner.7e59da11.gif\";","import React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  appbar: {\r\n    background: \"#00783E\",\r\n    color: \"#ffffff\",\r\n  },\r\n  formControl: {\r\n    minWidth: 120,\r\n    color: \"#ffffff\",\r\n  },\r\n  selectCountry: {\r\n    color: \"#ffffff\",\r\n    borderBottom: \"#ffffff solid 2px\",\r\n  },\r\n}));\r\n\r\nfunction Header(props) {\r\n  const { handleCountry, data } = props;\r\n  const [country, setCountry] = useState(\"\");\r\n\r\n  const handleChange = (event) => {\r\n    setCountry(event.target.value);\r\n    handleCountry(event.target.value);\r\n  };\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <AppBar className={classes.appbar} position=\"static\">\r\n      <Toolbar>\r\n        <IconButton\r\n          edge=\"start\"\r\n          className={classes.menuButton}\r\n          color=\"inherit\"\r\n          aria-label=\"menu\"\r\n        ></IconButton>\r\n        <Typography variant=\"h6\" className={classes.title}>\r\n          COVID - TRACKER\r\n        </Typography>\r\n        <FormControl className={classes.formControl}>\r\n          <InputLabel style={{ color: \"#ffffff\" }} id=\"contry\">\r\n            Countries\r\n          </InputLabel>\r\n\r\n          <Select\r\n            className={classes.selectCountry}\r\n            labelId=\"country-selector\"\r\n            id=\"country-selectors\"\r\n            value={country}\r\n            onChange={handleChange}\r\n          >\r\n            {data.Countries &&\r\n              data.Countries.map((country) => {\r\n                return (\r\n                  <MenuItem key={country.Slug} value={country.Country}>\r\n                    {country.Country}\r\n                  </MenuItem>\r\n                );\r\n              })}\r\n          </Select>\r\n        </FormControl>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Spinner from \"./../images/Spinner.gif\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  divider: {\r\n    margin: `${theme.spacing(3)}px 0`,\r\n  },\r\n  countryCard: {\r\n    background: \"#00783E\",\r\n    color: \"#ffffff\",\r\n  },\r\n  grid: {\r\n    margin: \"30px\",\r\n  },\r\n}));\r\n\r\nfunction chartData(charts) {\r\n  charts.splice(0, charts.length - 15);\r\n  return {\r\n    labels: charts.map((date) => {\r\n      var date = new Date(date.Date);\r\n      return date.getDate() + \"/\" + (date.getMonth() + 1);\r\n    }),\r\n    datasets: [\r\n      {\r\n        label: \"Covid Curve for last 15 days\",\r\n        fill: false,\r\n        lineTension: 0.1,\r\n        backgroundColor: \"rgba(75,192,192,0.4)\",\r\n        borderColor: \"rgba(75,192,192,1)\",\r\n        borderCapStyle: \"butt\",\r\n        borderDash: [],\r\n        borderDashOffset: 0.0,\r\n        borderJoinStyle: \"miter\",\r\n        pointBorderColor: \"rgba(75,192,192,1)\",\r\n        pointBackgroundColor: \"#fff\",\r\n        pointBorderWidth: 1,\r\n        pointHoverRadius: 5,\r\n        pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\r\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\r\n        pointHoverBorderWidth: 2,\r\n        pointRadius: 1,\r\n        pointHitRadius: 10,\r\n\r\n        data: charts.map((cases) => {\r\n          return cases.Cases;\r\n        }),\r\n      },\r\n    ],\r\n  };\r\n}\r\n\r\nfunction CountryInfo({ country, chart, loading }) {\r\n  const classes = useStyles();\r\n\r\n  return loading ? (\r\n    <Grid direction=\"column\">\r\n      <Grid item sm className={classes.grid}>\r\n        {country.map((c) => {\r\n          return (\r\n            <Card>\r\n              <CardContent className={classes.countryCard}>\r\n                <Typography\r\n                  display=\"block\"\r\n                  className={\"MuiTypography--heading\"}\r\n                  variant={\"h6\"}\r\n                  gutterBottom\r\n                >\r\n                  {c.Country}\r\n                </Typography>\r\n\r\n                <Typography display=\"block\" variant=\"subtitle2\">\r\n                  TotalConfirmed: {c.TotalConfirmed}\r\n                </Typography>\r\n                <Typography variant=\"subtitle2\" display=\"block\">\r\n                  TotalRecovered: {c.TotalRecovered}\r\n                </Typography>\r\n                <Typography display=\"block\" variant=\"subtitle2\">\r\n                  TotalDeaths: {c.TotalDeaths}\r\n                </Typography>\r\n                <Typography\r\n                  display=\"block\"\r\n                  className={\"MuiTypography--subheading\"}\r\n                  variant=\"subtitle2\"\r\n                >\r\n                  NewConfirmed: {c.NewConfirmed}\r\n                </Typography>\r\n                <Divider className={classes.divider} light />\r\n                <Typography variant=\"subtitle2\">\r\n                  Date Updated: {c.Date}\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          );\r\n        })}\r\n      </Grid>\r\n      <Grid item md className={classes.grid}>\r\n        <Line data={chartData(chart)} width={80} height={50} />\r\n      </Grid>\r\n    </Grid>\r\n  ) : (\r\n    <Grid container justify=\"center\">\r\n      <Grid item>\r\n        <Typography variant=\"subtitle\">\r\n          Please select a country to visualize the data\r\n        </Typography>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default CountryInfo;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CountryInfo from \"./CountryInfo\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  grid: {\r\n    margin: \"0 -15px !important\",\r\n    width: \"unset\",\r\n  },\r\n  items: {\r\n    margin: \"15px\",\r\n    \"&:hover\": {\r\n      transform: \"scale(1.09)\",\r\n      background: \"white\",\r\n      transition: \"transform 1s ease-in\",\r\n    },\r\n  },\r\n  card: {\r\n    background: \"#234361\",\r\n    color: \"#ffffff\",\r\n  },\r\n\r\n  divider: {\r\n    margin: theme.spacing(2, 0),\r\n  },\r\n}));\r\n\r\nfunction Dashboard({ country, allstats, chart, loading }) {\r\n  console.log(allstats);\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Container>\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justify=\"space-around\"\r\n        spacing={3}\r\n        className={classes.grid}\r\n      >\r\n        <Grid item xs={12} sm={6} md={3} className={classes.items}>\r\n          <Card className={classes.card}>\r\n            <p style={{ textAlign: \"center\" }}>Total infected </p>\r\n            <h3 style={{ textAlign: \"center\" }}>\r\n              {allstats && allstats.Global && allstats.Global.TotalConfirmed}\r\n            </h3>\r\n          </Card>\r\n        </Grid>\r\n        <Grid item xs={12} sm={6} md={3} className={classes.items}>\r\n          <Card className={classes.card}>\r\n            <p style={{ textAlign: \"center\" }}>Total Deaths </p>\r\n            <h3 style={{ textAlign: \"center\" }}>\r\n              {allstats && allstats.Global && allstats.Global.TotalDeaths}\r\n            </h3>\r\n          </Card>\r\n        </Grid>\r\n        <Grid item xs={12} sm={6} md={3} className={classes.items}>\r\n          <Card className={classes.card}>\r\n            <p style={{ textAlign: \"center\" }}>Total Recovered</p>\r\n            <h3 style={{ textAlign: \"center\" }}>\r\n              {allstats && allstats.Global && allstats.Global.TotalRecovered}\r\n            </h3>\r\n          </Card>\r\n        </Grid>\r\n        <Divider className={classes.divider} />\r\n      </Grid>\r\n      <CountryInfo country={country} chart={chart} loading={loading} />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport Dashboard from \"./components/Dashboard\";\nimport axios from \"axios\";\n\nfunction App() {\n  const [country, setCountry] = useState([]);\n  const [chart, setChart] = useState([]);\n\n  const handleCountry = (c) => {\n    setCountry(filterCountry(c));\n    fetchSelectedCountry(c);\n    setIsLoading(true);\n  };\n  const [allCountries, setAllCountries] = useState([]);\n  const fetchAllCountries = async () => {\n    const stats = await axios.get(\"https://api.covid19api.com/summary\");\n    setAllCountries(stats.data);\n  };\n  const [isLoading, setIsLoading] = useState(false);\n\n  const fetchSelectedCountry = async (country) => {\n    var currentDate = new Date();\n    var getMonth = currentDate.getMonth() + 1;\n    var getDay = currentDate.getDate();\n    var getYear = currentDate.getFullYear();\n\n    const chart = await axios.get(\n      `https://api.covid19api.com/country/${country}/status/confirmed?from=2020-04-01T00:00:00Z&to=${getYear}-0${getDay}-${getMonth}T00:00:00Z`\n    );\n    setChart(chart.data);\n  };\n\n  useEffect(() => {\n    fetchAllCountries();\n    setIsLoading(false);\n  }, []);\n\n  const filterCountry = (ct) => {\n    return (\n      allCountries.Countries &&\n      allCountries.Countries.filter((c) => {\n        return c.Country === ct;\n      })\n    );\n  };\n\n  return (\n    <div className=\"covid\">\n      <Header\n        handleCountry={handleCountry}\n        data={allCountries}\n        filter={filterCountry}\n      />\n      <Dashboard\n        country={country}\n        allstats={allCountries}\n        chart={chart}\n        loading={isLoading}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}